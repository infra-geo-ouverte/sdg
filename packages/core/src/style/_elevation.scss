@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use './sass-utils';
@use '../tokens/sys-palettes';

$values: (
  0: '0px 0px 0px 0px',
  1: '0px 1px 4px 0px ',
  2: '0px 2px 8px 0px',
  3: '0px 4px 16px 0px',
  4: '0px 6px 24px 0px'
);

// The default color "dark-blue" or "#223654" for elevation shadows.
$color: map.get(sys-palettes.$palettes, 'blue', 700) !default;

// Applies the correct css rules to an element to give it the elevation specified by $zValue.
// The $zValue must be between 0 and 24.
@mixin elevation($zValue, $color: $color, $opacity: null) {
  box-shadow: get-box-shadow($zValue, $color, $opacity);
}

@function get-box-shadow($zValue, $opacity: null) {
  @if $zValue == null {
    @return null;
  }

  @if (sass-utils.is-css-var-name($zValue)) {
    @return $zValue;
  }

  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {
    @error '$zValue must be a unitless number, but received `#{$zValue}`';
  }

  @if $zValue < 0 or $zValue > 4 {
    @error '$zValue must be between 0 and 4, but received `#{$zValue}`';
  }

  $z-value: map.get($values, $zValue);
  $shadow-color: _compute-color-opacity($color, 0.24);

  @return string.unquote('#{$z-value} #{$shadow-color}');
}

@function _compute-color-opacity($color, $opacity) {
  @if meta.type-of($color) == color and $opacity != null {
    @return rgba($color, $opacity);
  } @else {
    @return $color;
  }
}
